import * as soundworks from 'soundworks/client';
import SampleSynth from './SampleSynth.js';
import Looper from './Looper.js';
import Circles from './Circles.js';
import audioFiles from './audioFiles.js';

const client = soundworks.client;

const template = `
  <canvas class="background"></canvas>
  <div class="foreground">
    <div class="section-top flex-middle"></div>
    <div class="section-center flex-center">
    <% if (state === 'reset') { %>
      <p>Waiting for<br>everybody<br>getting readyâ€¦</p>
    <% } else if (state === 'end') { %>
      <p>That's all.<br>Thanks!</p>
    <% } else { %>
      <p>
      <% if (numAvailable > 0) { %>
        You have<br />
        <% if (numAvailable === maxDrops) { %>
          <span class="huge"><%= numAvailable %></span>
        <% } else { %>
          <span class="huge"><%= numAvailable %> of <%= maxDrops %></span>
        <% } %>
        <br /><%= (numAvailable === 1) ? 'drop' : 'drops' %> to play
      <% } else { %>
        <span class="big">Listen!</span>
      <% } %>
      </p>
    <% } %>
    </div>
    <div class="section-bottom flex-middle"></div>
  </div>
`;

const model = {
  state: null,
  maxDrop: 0,
  numAvailable: 0,
};

const deviceMotionPlatformFeatureDef = {
  id: 'device-motion',
  check: function () {
    return true;
  },
  interactionHook: () => {
    if (!!DeviceMotionEvent && typeof DeviceMotionEvent.requestPermission === 'function') {

      return DeviceMotionEvent.requestPermission()
        .then((response) => {
          return Promise.resolve(response == 'granted');
        })
        .catch((err) => {
          console.log(err);
          return Promise.resolve(false);
        });
    }

    return Promise.resolve(true);
  }
}

export default class PlayerExperience extends soundworks.Experience {
  constructor(assetsDomain) {
    super();

    this.platform = this.require('platform', { features: ['web-audio', 'device-motion'] });
    this.platform.addFeatureDefinition(deviceMotionPlatformFeatureDef);

    this.require('audio-buffer-manager');
    this.audioBufferManager = this.require('audio-buffer-manager', {
      assetsDomain: assetsDomain,
      files: audioFiles,
    });

    this.scheduler = this.require('sync-scheduler');
    this.checkin = this.require('checkin');
    this.params = this.require('shared-params');

    // a simple sample player with a list of samples
    this.synth = new SampleSynth();

    // control parameters
    this.state = 'reset';
    this.maxDrops = 0;

    this.loopParams = {};
    this.loopParams.div = 3;
    this.loopParams.period = 7.5;
    this.loopParams.attenuation = 0.70710678118655;
    this.loopParams.minGain = 0.1;

    this.autoPlay = 'off'; // automatic (random) playing: 'disable', 'off', 'on'
    this.quantize = 0; // quantization step in

    // renderer generating growing circles on touch
    this.renderer = new Circles();

    // each touch starts its own loop generated by the 'looper'
    this.looper = new Looper(this.scheduler, this.synth, this.renderer, this.loopParams, () => this.updateCount());
  }

  trigger(x, y) {
    const soundParams = {
      index: client.index,
      gain: 1,
      x: x,
      y: y,
    };

    let time = this.scheduler.syncTime;

    // quantize
    if (this.quantize > 0)
      time = Math.ceil(time / this.quantize) * this.quantize;

    this.looper.start(time, soundParams, true);
    this.send('sound', time, soundParams);
  }

  clear() {
    // remove at own looper
    this.looper.remove(client.index, true);

    // remove at other players
    this.send('clear');
  }

  updateCount() {
    this.view.model.maxDrops = this.maxDrops;
    this.view.model.message = undefined;

    if (this.state === 'reset') {
      this.view.model.state = 'reset';
    } else if (this.state === 'end' && this.looper.loops.length === 0) {
      this.view.model.state = 'end';
    } else {
      this.view.model.state = this.state;
      this.view.model.numAvailable = Math.max(0, this.maxDrops - this.looper.numLocalLoops);
    }

    this.view.render('.section-center');
  }

  autoTrigger() {
    if (this.autoPlay === 'on') {
      if (this.state === 'running' && this.looper.numLocalLoops < this.maxDrops)
        this.trigger(Math.random(), Math.random());

      setTimeout(() => {
        this.autoTrigger();
      }, Math.random() * 2000 + 50);
    }
  }

  autoClear() {
    if (this.autoPlay === 'on') {
      if (this.looper.numLocalLoops > 0)
        this.clear(Math.random(), Math.random());

      setTimeout(() => {
        this.autoClear();
      }, Math.random() * 60000 + 60000);
    }
  }

  setState(state) {
    if (state !== this.state) {
      this.state = state;
      this.updateCount();
    }
  }

  setMaxDrops(maxDrops) {
    if (maxDrops !== this.maxDrops) {
      this.maxDrops = maxDrops;
      this.updateCount();
    }
  }

  setAutoPlay(autoPlay) {
    if (this.autoPlay !== 'disable' && autoPlay !== this.autoPlay) {
      this.autoPlay = autoPlay;

      if (autoPlay === 'on') {
        this.autoTrigger();
        this.autoClear();
      }
    }
  }

  registerDeviceMotionListener() {
    if (DeviceMotionEvent) {
      window.addEventListener('devicemotion', (e) => {
        let accX = event.accelerationIncludingGravity.x;
        let accY = event.accelerationIncludingGravity.y;
        let accZ = event.accelerationIncludingGravity.z;
        const mag = Math.sqrt(accX * accX + accY * accY + accZ * accZ);

        // clear screen on shaking
        if (mag > 20) {
          this.clear();
          this.autoPlay = 'disable'; // disable auto play on shake
        }
      });
    }
  }

  start() {
    super.start();

    this.view = new soundworks.CanvasView(template, model, {}, {
      id: this.id,
      preservePixelRatio: true,
      ratios: {
        '.section-top': 0.333,
        '.section-center': 0.333,
        '.section-bottom': 0.333,
      },
    });

    this.show().then(() => {
      // setup shared parameter (controller) listeners
      const params = this.params;
      params.addParamListener('state', (state) => this.setState(state));
      params.addParamListener('maxDrops', (value) => this.setMaxDrops(value));
      params.addParamListener('loopDiv', (value) => this.loopParams.div = value);
      params.addParamListener('loopPeriod', (value) => this.loopParams.period = value);
      params.addParamListener('loopAttenuation', (value) => this.loopParams.attenuation = value);
      params.addParamListener('minGain', (value) => this.loopParams.minGain = value);
      params.addParamListener('autoPlay', (value) => this.setAutoPlay(value));
      params.addParamListener('clear', () => this.looper.removeAll());

      // setup motion input listeners
      this.registerDeviceMotionListener();

      // create touch event source referring to our view
      const surface = new soundworks.TouchSurface(this.view.$el);

      // setup touch listeners
      surface.addListener('touchstart', (id, normX, normY) => {
        if (this.state === 'running' && this.looper.numLocalLoops < this.maxDrops)
          this.trigger(normX, normY);

        this.autoPlay = 'disable'; // disable auto play on touch
      });

      // setup listeners for messages from server
      this.receive('echo', (time, soundParams) => this.looper.start(time, soundParams));
      this.receive('clear', (index) => this.looper.remove(index));

      // rederer starts with black screen
      this.view.setPreRender((ctx) => {
        ctx.fillStyle = '#000';
        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
      });

      // add renderer to view
      this.view.addRenderer(this.renderer);

      // set synth audio buffers
      this.synth.audioBuffers = this.audioBufferManager.data;

      // launch autoplay (for testing)
      if (this.autoPlay) {
        this.autoTrigger();
        this.autoClear();
      }
    });
  }
}
